# Project Description

*Bayesian analysis is a statistical approach that interprets probability as a measure of belief or confidence in an event occurring. It allows us to update our beliefs about parameters of interest based on evidence (data) as it becomes available. This is a field of Statistics that I am constantly trying to learn more about.*

*Considering my love for exercise and health, I found a dataset on physical activity and heart rate to use for a Bayesian analysis. I am interested in exploring the relationship between exercise and heart rate, which calls for a linear regression approach. To perform a Bayesian linear regression, I will use the `brms` package in R. This package provides an interface to fit complex Bayesian models using the probabilistic programming language Stan. Stan's efficient Hamiltonian Monte Carlo (HMC) algorithms can sample from the posterior distribution of the model parameters.*

*I could not have learned some of these steps by myself. An amazing resource to check out is `bayesrulesbook.com`; it will teach you so much about the Bayesian philosophy and techniques. If you curious about where I learned some of the steps below, check out Chapter 6!*

### Step 1: Install and load necessary packages

```{r}
options(repos = c(CRAN = "https://cloud.r-project.org"))
library(brms)
library(bayesplot)
```

```{r}
data<-read.csv("exercise_data.csv")
head(data)
```

### Step 2: Create the Bayesian Linear Regression

```{r}
# We can model heart rate as a function of physical activity, age, weight, and gender
model <- brm(
  heart_rate ~ physical_activity + age + weight + gender,
  data = data,
  family = gaussian(), # Assuming heart rate follows a Gaussian normal distribution
  prior = c(set_prior("normal(0, 10)", class = "b")) # set a normal prior of M = 0 and SD = 10
)

# Print a summary of the fitted model, we can assess our estimates and our credible intervals
summary(model)
```

***Important Note:** Credible intervals crossing through 0 in Bayesian analysis indicate uncertainty or lack of evidence for a nonzero effect. They prompt careful consideration of the implications for your research question and the need for further investigation or interpretation in light of these findings.*

### Step 3: Data Visualization

-   ***Trace Plots**: Displays the sampled values of the parameters over iterations of the Markov Chain Monte Carlo (MCMC) sampling.*

    -   ***Interpretation**: Look for a "fuzzy caterpillar" appearance where the chains mix well and cover the parameter space evenly. This suggests good mixing and convergence. If the chains show trends or don't mix well, it indicates poor convergence and potential issues with the sampling process.*

```{r}
# Trace Plots
trace_plot <- mcmc_trace(model, size = .1)
print(trace_plot)
```

-   ***Density Plots**: Shows the posterior distributions of the parameters.*

    -   ***Interpretation**: These should be smooth and unimodal. Multiple peaks might indicate issues with convergence or that the model has not properly identified the posterior distribution.*

```{r}
# Density Plots (Posterior distributions)
mcmc_dens(model) + 
  yaxis_text(TRUE)
```

-   ***Density Overlay Plot**: Compares the density of the observed data to the density of the data generated by the model.*

    -   ***Interpretation**: The observed data (usually shown in a solid line) should ideally lie within the range of the simulated data (shaded area or dashed lines). If the observed data fall outside this range, it may indicate that the model does not fit the data well.*

```{r}
# Posterior Predictive Checks (Density Overlay)
pp_check_plot <- pp_check(model, ndraws = 100)
print(pp_check_plot)
```
